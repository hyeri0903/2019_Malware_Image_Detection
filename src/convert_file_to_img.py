import os
import numpy as np
import math
import time
from PIL import Image
import configparser

# config parameters
config = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
config.read('config.ini')

# 정상과 악성파일 (toy data)가 저장되어있는 경로
mal_file_path = os.path.normpath(config.get('PATH', 'MAL_DIR'))
ben_file_path = os.path.normpath(config.get('PATH', 'BEN_DIR'))


# grayscale img로 만든 데이터를 저장 할 경로
save_mal_path = os.path.normpath(config.get('PATH', 'MAL_IMG_DIR'))
save_ben_path = os.path.normpath(config.get('PATH', 'BEN_IMG_DIR'))


# Dict의 key를 범위로 만들기위한 클래스
class RangeDict(dict):
    def __getitem__(self, item):
        if type(item) != range:  # or xrange in Python 2
            for key in self:
                if item in key:
                    return self[key]
        else:
            return super().__getitem__(item)


WIDTH = RangeDict({
    range(0, 10): 32,
    range(10, 30): 64,
    range(30, 60): 128,
    range(60, 100): 256,
    range(100, 200): 384,
    range(200, 500): 512,
    range(500, 1000): 768,
    range(1000, 999999): 1024})


# 파일 불러오기
def make_file_list(file_path):
    fname = []
    for root, dirs, files in os.walk(file_path):
        for file in files:
            fname.append(file)
        # print (file)
    return fname


# 파일을 1 Byte씩 읽어서 1차원 배열로 만듦
def make_binaryseq(fpath, fname):
    arr = list()
    with open(os.path.join(fpath, fname), 'rb') as f:
        b = bytearray(f.read())

    arr = list(b)
    arr = np.array(arr)
    return arr


# 파일크기에 따른 width와 height 구하기
def get_width_height(fsize, arr):
    w = WIDTH[fsize]
    h = math.ceil(len(arr) / w)
    # print("width :{}, height: {}".format(w, h))
    return w, h


# 직사각형 2차원 배열 형성
def make_rectangle(fpath, fname):
    arr = make_binaryseq(fpath, fname)
    fsize = os.path.getsize(os.path.join(fpath, fname))
    fsize = round(fsize / 1024)  # Byte -> KB 단위로 바꿔주기
    width, height = get_width_height(fsize, arr)

    arr.resize((height, width))
    return arr


# grayscale 이미지로 데이터 저장
def save_grayscale_img(path, fname, arr):
    f = fname.split('.')
    md5 = f[0]
    im = Image.fromarray(arr)
    im = im.convert('RGB')
    im.save(os.path.join(path, md5 + '.png'))


if __name__ == "__main__":
    # 1. ben과 mal 각각 파일 이름을 리스트에 저장
    # 2. 파일을 1차원 배열인 바이너리 시퀀스로 변환
    # 3. 파일의 사이즈에 따라 width , height 정함
    # 4. width, height에 따라서 1차원 배열을 2차원 배열로 resize
    # 5. 2차원 배열을 이미지 RGB 채널로 변환후 png 파일로 저장

    benign = make_file_list(ben_file_path)
    malware = make_file_list(mal_file_path)

    print(len(benign))
    print(len(malware))
    startTime = time.time()

    # malware file -> img file
    for i in range(len(malware)):
        arr = make_rectangle(mal_file_path, malware[i])
        save_grayscale_img(save_mal_path, malware[i], arr)

    # benign file -> img file
    for j in range(len(benign)):
        arr = make_rectangle(ben_file_path, benign[j])
        save_grayscale_img(save_ben_path, benign[j], arr)

    endTime = time.time() - startTime
    print("Total Time: {}".format(endTime))